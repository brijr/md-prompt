{"version":3,"sources":["../src/templates.ts"],"sourcesContent":["import { writeFileSync, mkdirSync } from \"fs\";\nimport { join } from \"path\";\n\nexport interface TemplateOptions {\n  framework?: \"mastra\" | \"ai-sdk\" | \"openai\" | \"basic\";\n  promptsDir?: string;\n  typescript?: boolean;\n}\n\nconst templates: Record<string, Record<string, string>> = {\n  basic: {\n    \"prompts/assistant.md\": `# AI Assistant\n\nYou are a helpful AI assistant named {name}.\n\n## Your Role\nYou provide accurate and helpful information on a wide variety of topics.\n\n## Instructions\n- Be {tone?} in your responses\n- Keep answers {length?} unless asked for more detail\n- If you don't know something, say so honestly`,\n\n    \"example.ts\": `import assistantPrompt from './prompts/assistant.md';\n\n// Basic usage\nconst prompt = assistantPrompt({\n  name: 'Claude',\n  tone: 'friendly',\n  length: 'concise'\n});\n\nconsole.log(prompt);`,\n  },\n\n  mastra: {\n    \"src/prompts/weather-agent.md\": `# Weather Assistant\n\nYou are a helpful weather assistant named {name} that provides accurate weather information and can help planning activities based on the weather.\n\nYour primary function is to help users get weather details for specific locations. When responding:\n\n- Always ask for a location if none is provided\n- If the location name isn't in English, please translate it\n- If giving a location with multiple parts (e.g. \"New York, NY\"), use the most relevant part (e.g. \"New York\")\n- Include relevant details like humidity, wind conditions, and precipitation\n- Keep responses concise but informative\n- If the user asks for activities and provides the weather forecast, suggest activities based on the weather forecast.\n- If the user asks for activities, respond in the format they request.\n\nUse the weatherTool to fetch current weather data.`,\n\n    \"src/agents/weather-agent.ts\": `import { anthropic } from \"@ai-sdk/anthropic\";\nimport { Agent } from \"@mastra/core/agent\";\nimport { Memory } from \"@mastra/memory\";\nimport { LibSQLStore } from \"@mastra/libsql\";\nimport weatherPrompt from \"../prompts/weather-agent.md\";\n\nexport const weatherAgent = new Agent({\n  name: \"Weather Agent\",\n  instructions: weatherPrompt({ name: \"Claude\" }),\n  model: anthropic(\"claude-3-5-sonnet-20241022\"),\n  memory: new Memory({\n    storage: new LibSQLStore({\n      url: \"file:../mastra.db\",\n    }),\n  }),\n});`,\n\n    \"src/mastra/index.ts\": `import { Mastra } from \"@mastra/core/mastra\";\nimport { weatherAgent } from \"../agents/weather-agent\";\n\nexport const mastra = new Mastra({\n  agents: { weatherAgent }\n});`,\n  },\n\n  \"ai-sdk\": {\n    \"prompts/chat-assistant.md\": `# Chat Assistant\n\nYou are a conversational AI assistant that helps users with various tasks.\n\n## Context\n- Conversation ID: {conversationId}\n- User: {userName?}\n- Session: {sessionId}\n\n## Instructions\n- Be helpful and {tone}\n- Maintain context throughout the conversation\n- Ask clarifying questions when needed\n- Provide actionable advice when possible`,\n\n    \"src/chat.ts\": `import { openai } from '@ai-sdk/openai';\nimport { generateText } from 'ai';\nimport chatPrompt from '../prompts/chat-assistant.md';\n\nexport async function generateResponse(message: string, context: any = {}) {\n  const prompt = chatPrompt({\n    conversationId: context.conversationId || 'default',\n    userName: context.userName,\n    sessionId: context.sessionId || Date.now().toString(),\n    tone: 'friendly'\n  });\n\n  const { text } = await generateText({\n    model: openai('gpt-4'),\n    messages: [\n      { role: 'system', content: prompt },\n      { role: 'user', content: message }\n    ],\n  });\n\n  return text;\n}`,\n  },\n\n  openai: {\n    \"prompts/completion.md\": `# Task Assistant\n\nYou are an AI assistant that helps complete various tasks efficiently.\n\n## Task Details\n- Task: {taskType}\n- Context: {context?}\n- Requirements: {requirements?}\n- Output format: {outputFormat?}\n\n## Instructions\n- Focus on the specific task at hand\n- Provide clear, actionable responses\n- Follow the specified output format if provided`,\n\n    \"src/openai-client.ts\": `import OpenAI from 'openai';\nimport completionPrompt from '../prompts/completion.md';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nexport async function completeTask(task: {\n  taskType: string;\n  context?: string;\n  requirements?: string;\n  outputFormat?: string;\n}) {\n  const prompt = completionPrompt(task);\n\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: 'user', content: prompt }],\n    model: 'gpt-4',\n  });\n\n  return completion.choices[0]?.message?.content;\n}`,\n  },\n};\n\nexport function scaffoldTemplate(\n  framework: TemplateOptions[\"framework\"] = \"basic\",\n  options: TemplateOptions = {}\n) {\n  const { promptsDir = \".\" } = options;\n  const templateFiles = templates[framework || \"basic\"] || templates.basic;\n\n  const createdFiles: string[] = [];\n\n  if (!templateFiles) {\n    console.warn(`No templates found for framework: ${framework}, using basic templates`);\n    return createdFiles;\n  }\n\n  for (const [filePath, content] of Object.entries(templateFiles)) {\n    const fullPath = join(promptsDir, filePath);\n    const dir = join(fullPath, \"..\");\n\n    try {\n      mkdirSync(dir, { recursive: true });\n      writeFileSync(fullPath, content);\n      createdFiles.push(filePath);\n    } catch (error) {\n      console.error(`Failed to create ${filePath}:`, error);\n    }\n  }\n\n  return createdFiles;\n}\n\nexport function getAvailableTemplates(): string[] {\n  return Object.keys(templates);\n}\n"],"mappings":";AAAA,SAAS,eAAe,iBAAiB;AACzC,SAAS,YAAY;AAQrB,IAAM,YAAoD;AAAA,EACxD,OAAO;AAAA,IACL,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYxB,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUhB;AAAA,EAEA,QAAQ;AAAA,IACN,gCAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBhC,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiB/B,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzB;AAAA,EAEA,UAAU;AAAA,IACR,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAe7B,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBjB;AAAA,EAEA,QAAQ;AAAA,IACN,yBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAezB,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsB1B;AACF;AAEO,SAAS,iBACd,YAA0C,SAC1C,UAA2B,CAAC,GAC5B;AACA,QAAM,EAAE,aAAa,IAAI,IAAI;AAC7B,QAAM,gBAAgB,UAAU,aAAa,OAAO,KAAK,UAAU;AAEnE,QAAM,eAAyB,CAAC;AAEhC,MAAI,CAAC,eAAe;AAClB,YAAQ,KAAK,qCAAqC,SAAS,yBAAyB;AACpF,WAAO;AAAA,EACT;AAEA,aAAW,CAAC,UAAU,OAAO,KAAK,OAAO,QAAQ,aAAa,GAAG;AAC/D,UAAM,WAAW,KAAK,YAAY,QAAQ;AAC1C,UAAM,MAAM,KAAK,UAAU,IAAI;AAE/B,QAAI;AACF,gBAAU,KAAK,EAAE,WAAW,KAAK,CAAC;AAClC,oBAAc,UAAU,OAAO;AAC/B,mBAAa,KAAK,QAAQ;AAAA,IAC5B,SAAS,OAAO;AACd,cAAQ,MAAM,oBAAoB,QAAQ,KAAK,KAAK;AAAA,IACtD;AAAA,EACF;AAEA,SAAO;AACT;AAEO,SAAS,wBAAkC;AAChD,SAAO,OAAO,KAAK,SAAS;AAC9B;","names":[]}